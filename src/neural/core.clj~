(ns neural.core
  (:gen-class))

(use 'clojure.core.matrix)



(defn activation 
"Sigmoid activation function"
[x]
  (/ 1. (+ 1 (Math/exp (- 0 x)))))

(def layer-sizes [2,3,5,2])

(def weight-shapes (into [] (zipmap (rest layer-sizes) (drop-last layer-sizes))))


(defn randmat "Creates a random matrix of shape sh" [sh]  (reshape (repeatedly (* (sh 0) (sh 1)) #(rand)) sh))

(def weights  (into [] (for [ashape weight-shapes] (randmat ashape)))  )

(def biases (into [] (for [size (rest layer-sizes)] (vec (repeat size 0))))
)

(defn propagate [x]
  (add (mmul (weights 0) x) (biases 0)) 
)
(defn -main
  "I don't do a whole lot ... yet."
  [& args]
  (println "Hello, World!"))
